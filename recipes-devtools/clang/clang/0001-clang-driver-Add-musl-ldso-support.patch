From 21cb1801f0da97918ce5a567cd1f60413b4de726 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Wed, 30 Mar 2016 19:56:10 -0700
Subject: [PATCH 1/4] clang: driver: Add musl ldso support

Linux/musl libc implementation has different ldso
this needs to take effect when target arch is detected
as a musl based Linux platform

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 lib/Driver/Tools.cpp | 48 ++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 42 insertions(+), 6 deletions(-)

diff --git a/lib/Driver/Tools.cpp b/lib/Driver/Tools.cpp
index 8a1cb54..0ce548c 100644
--- a/lib/Driver/Tools.cpp
+++ b/lib/Driver/Tools.cpp
@@ -8994,6 +8994,47 @@ static std::string getLinuxDynamicLinker(const ArgList &Args,
       return "/system/bin/linker64";
     else
       return "/system/bin/linker";
+  } else if (ToolChain.getTriple().isLinuxMuslEnvironment()) {
+    switch (Arch) {
+      case llvm::Triple::x86:
+        return "/lib/ld-musl-i386.so.1";
+      case llvm::Triple::x86_64:
+        if (ToolChain.getTriple().getEnvironment() == llvm::Triple::MUSLX32)
+          return "/lib/ld-musl-x32.so.1";
+        else
+          return "/lib/ld-musl-x86_64.so.1";
+      case llvm::Triple::aarch64:
+        return "/lib/ld-musl-aarch64.so.1";
+      case llvm::Triple::aarch64_be:
+        return "/lib/ld-musl-aarch64_be.so.1";
+      case llvm::Triple::ppc:
+        return "/lib/ld-musl-powerpc.so.1";
+      case llvm::Triple::ppc64:
+        return "/lib/ld-musl-powerpc64.so.1";
+      case llvm::Triple::arm:
+      case llvm::Triple::thumb:
+        if(arm::getARMFloatABI(ToolChain, Args) == arm::FloatABI::Hard)
+          return "/lib/ld-musl-armhf.so.1";
+        else
+          return "/lib/ld-musl-arm.so.1";
+      case llvm::Triple::armeb:
+      case llvm::Triple::thumbeb:
+        if(arm::getARMFloatABI(ToolChain, Args) == arm::FloatABI::Hard)
+          return "/lib/ld-musl-armebhf.so.1";
+        else
+          return "/lib/ld-musl-armeb.so.1";
+      case llvm::Triple::mips:
+        return "/lib/ld-musl-mips.so.1";
+      case llvm::Triple::mipsel:
+        return "/lib/ld-musl-mipsel.so.1";
+      case llvm::Triple::mips64:
+        return "/lib/ld-musl-mips64.so.1";
+      case llvm::Triple::mips64el:
+        return "/lib/ld-musl-mipsel64el.so.1";
+      default:
+        llvm_unreachable("unsupported musl architecture");
+        break;
+    }
   } else if (Arch == llvm::Triple::x86 || Arch == llvm::Triple::sparc ||
              Arch == llvm::Triple::sparcel)
     return "/lib/ld-linux.so.2";
@@ -9021,12 +9062,7 @@ static std::string getLinuxDynamicLinker(const ArgList &Args,
     bool IsNaN2008 = mips::isNaN2008(Args, Triple);
     if (mips::isUCLibc(Args))
       LibName = IsNaN2008 ? "ld-uClibc-mipsn8.so.0" : "ld-uClibc.so.0";
-    else if (!Triple.hasEnvironment() &&
-             Triple.getVendor() == llvm::Triple::VendorType::MipsTechnologies) {
-      bool LE = (Triple.getArch() == llvm::Triple::mipsel) ||
-                (Triple.getArch() == llvm::Triple::mips64el);
-      LibName = LE ? "ld-musl-mipsel.so.1" : "ld-musl-mips.so.1";
-    } else
+    else
       LibName = IsNaN2008 ? "ld-linux-mipsn8.so.1" : "ld.so.1";
 
     return (LibDir + "/" + LibName).str();
-- 
2.8.2

