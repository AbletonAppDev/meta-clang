From fb45cce576a5a748df271ba9e3aa4c4acaece100 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Sat, 21 May 2016 21:49:08 -0700
Subject: [PATCH 1/4] clang: driver: Add musl ldso support

Linux/musl libc implementation has different ldso
this needs to take effect when target arch is detected
as a musl based Linux platform

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 lib/Driver/Tools.cpp | 104 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 104 insertions(+)

diff --git a/lib/Driver/Tools.cpp b/lib/Driver/Tools.cpp
index c4ac773..ea8b528 100644
--- a/lib/Driver/Tools.cpp
+++ b/lib/Driver/Tools.cpp
@@ -9108,6 +9108,110 @@ static void AddLibgcc(const llvm::Triple &Triple, const Driver &D,
     CmdArgs.push_back("-ldl");
 }
 
+static std::string getLinuxDynamicLinker(const ArgList &Args,
+                                         const toolchains::Linux &ToolChain) {
+  const llvm::Triple::ArchType Arch = ToolChain.getArch();
+  const llvm::Triple &Triple = ToolChain.getTriple();
+
+  if (Triple.isAndroid())
+    return Triple.isArch64Bit() ? "/system/bin/linker64" : "/system/bin/linker";
+  if (ToolChain.getTriple().isMusl()) {
+    switch (Arch) {
+      case llvm::Triple::x86:
+        return "/lib/ld-musl-i386.so.1";
+      case llvm::Triple::x86_64:
+          return "/lib/ld-musl-x86_64.so.1";
+      case llvm::Triple::aarch64:
+        return "/lib/ld-musl-aarch64.so.1";
+      case llvm::Triple::aarch64_be:
+        return "/lib/ld-musl-aarch64_be.so.1";
+      case llvm::Triple::ppc:
+        return "/lib/ld-musl-powerpc.so.1";
+      case llvm::Triple::ppc64:
+        return "/lib/ld-musl-powerpc64.so.1";
+      case llvm::Triple::arm:
+      case llvm::Triple::thumb:
+        if(arm::getARMFloatABI(ToolChain, Args) == arm::FloatABI::Hard)
+          return "/lib/ld-musl-armhf.so.1";
+        else
+          return "/lib/ld-musl-arm.so.1";
+      case llvm::Triple::armeb:
+      case llvm::Triple::thumbeb:
+        if(arm::getARMFloatABI(ToolChain, Args) == arm::FloatABI::Hard)
+          return "/lib/ld-musl-armebhf.so.1";
+        else
+          return "/lib/ld-musl-armeb.so.1";
+      case llvm::Triple::mips:
+        return "/lib/ld-musl-mips.so.1";
+      case llvm::Triple::mipsel:
+        return "/lib/ld-musl-mipsel.so.1";
+      case llvm::Triple::mips64:
+        return "/lib/ld-musl-mips64.so.1";
+      case llvm::Triple::mips64el:
+        return "/lib/ld-musl-mipsel64el.so.1";
+      default:
+        llvm_unreachable("unsupported musl architecture");
+        break;
+    }
+  }
+  switch (Arch) {
+  default: llvm_unreachable("unsupported architecture");
+
+  case llvm::Triple::aarch64:
+    return "/lib/ld-linux-aarch64.so.1";
+  case llvm::Triple::aarch64_be:
+    return "/lib/ld-linux-aarch64_be.so.1";
+  case llvm::Triple::arm:
+  case llvm::Triple::thumb:
+  case llvm::Triple::armeb:
+  case llvm::Triple::thumbeb: {
+    const bool IsHardFloat =
+        Triple.getEnvironment() == llvm::Triple::GNUEABIHF ||
+        arm::getARMFloatABI(ToolChain, Args) == arm::FloatABI::Hard;
+
+    return IsHardFloat ? "/lib/ld-linux-armhf.so.3" : "/lib/ld-linux.so.3";
+  }
+  case llvm::Triple::mips:
+  case llvm::Triple::mipsel:
+  case llvm::Triple::mips64:
+  case llvm::Triple::mips64el: {
+    bool IsNaN2008 = mips::isNaN2008(Args, Triple);
+    bool LE = (Triple.getArch() == llvm::Triple::mipsel) ||
+              (Triple.getArch() == llvm::Triple::mips64el);
+
+    std::string LibDir = "/lib" + mips::getMipsABILibSuffix(Args, Triple);
+    StringRef LibName;
+    if (mips::isUCLibc(Args))
+      LibName = IsNaN2008 ? "ld-uClibc-mipsn8.so.0" : "ld-uClibc.so.0";
+    else
+      LibName = IsNaN2008 ? "ld-linux-mipsn8.so.1" : "ld.so.1";
+
+    return (LibDir + "/" + LibName).str();
+  }
+  case llvm::Triple::ppc:
+    return "/lib/ld.so.1";
+  case llvm::Triple::ppc64:
+    return (ppc::hasPPCAbiArg(Args, "elfv2")) ? "/lib64/ld64.so.2"
+                                              : "/lib64/ld64.so.1";
+  case llvm::Triple::ppc64le:
+    return (ppc::hasPPCAbiArg(Args, "elfv1")) ? "/lib64/ld64.so.1"
+                                              : "/lib64/ld64.so.2";
+  case llvm::Triple::sparc:
+  case llvm::Triple::sparcel:
+    return "/lib/ld-linux.so.2";
+  case llvm::Triple::sparcv9:
+    return "/lib64/ld-linux.so.2";
+  case llvm::Triple::systemz:
+    return "/lib/ld64.so.1";
+  case llvm::Triple::x86:
+    return "/lib/ld-linux.so.2";
+  case llvm::Triple::x86_64:
+    return (Triple.getEnvironment() == llvm::Triple::GNUX32)
+               ? "/libx32/ld-linux-x32.so.2"
+               : "/lib64/ld-linux-x86-64.so.2";
+  }
+}
+
 static void AddRunTimeLibs(const ToolChain &TC, const Driver &D,
                            ArgStringList &CmdArgs, const ArgList &Args) {
   // Make use of compiler-rt if --rtlib option is used
-- 
2.9.0

