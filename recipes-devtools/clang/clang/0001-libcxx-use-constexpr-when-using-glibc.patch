From 7eef5975d0c68e8b34505a334061610efe50df3b Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Thu, 19 May 2016 23:22:52 -0700
Subject: [PATCH] libcxx: use constexpr when using glibc

POSIX does not permit using PTHREAD_COND_INITIALIZER except for static
initialization, and certainly does not permit using it as a value

also POSIX does not specify the type of the object (it's opaque) so if
there are any types for which their code would be invalid C++, then their
code is invalid

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 include/__mutex_base | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

Index: libcxx/include/__mutex_base
===================================================================
--- libcxx.orig/include/__mutex_base
+++ libcxx/include/__mutex_base
@@ -44,7 +44,10 @@ class _LIBCPP_TYPE_VIS _LIBCPP_THREAD_SA
 public:
     _LIBCPP_INLINE_VISIBILITY
 #ifndef _LIBCPP_CXX03_LANG
-    constexpr mutex() _NOEXCEPT = default;
+#ifdef __GLIBC__
+    constexpr
+#endif
+    mutex() _NOEXCEPT = default;
 #else
     mutex() _NOEXCEPT {__m_ = (__libcpp_mutex_t)_LIBCPP_MUTEX_INITIALIZER;}
 #endif
@@ -289,7 +292,10 @@ class _LIBCPP_TYPE_VIS condition_variabl
 public:
     _LIBCPP_INLINE_VISIBILITY
 #ifndef _LIBCPP_CXX03_LANG
-    constexpr condition_variable() _NOEXCEPT = default;
+#ifdef __GLIBC__
+    constexpr
+#endif
+    condition_variable() _NOEXCEPT = default;
 #else
     condition_variable() _NOEXCEPT {__cv_ = (__libcpp_condvar_t)_LIBCPP_CONDVAR_INITIALIZER;}
 #endif
